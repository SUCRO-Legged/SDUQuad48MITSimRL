/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.0
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class vision_start_stop_t implements lcm.lcm.LCMEncodable
{
    public byte start;

    public byte stop;

    /**
     * LCM Type: double[3]
     */
    public double start_position[];

    /**
     * LCM Type: double[3]
     */
    public double stop_position[];

 
    public vision_start_stop_t()
    {
        start_position = new double[3];
        stop_position = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x61385c7c33ce684fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.vision_start_stop_t.class))
            return 0L;
 
        classes.add(lcmtypes.vision_start_stop_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.start); 
 
        outs.writeByte(this.stop); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.start_position[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.stop_position[a]); 
        }
 
    }
 
    public vision_start_stop_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public vision_start_stop_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.vision_start_stop_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.vision_start_stop_t o = new lcmtypes.vision_start_stop_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.start = ins.readByte();
 
        this.stop = ins.readByte();
 
        this.start_position = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.start_position[a] = ins.readDouble();
        }
 
        this.stop_position = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.stop_position[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.vision_start_stop_t copy()
    {
        lcmtypes.vision_start_stop_t outobj = new lcmtypes.vision_start_stop_t();
        outobj.start = this.start;
 
        outobj.stop = this.stop;
 
        outobj.start_position = new double[(int) 3];
        System.arraycopy(this.start_position, 0, outobj.start_position, 0, 3); 
        outobj.stop_position = new double[(int) 3];
        System.arraycopy(this.stop_position, 0, outobj.stop_position, 0, 3); 
        return outobj;
    }
 
}

