"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class vision_start_stop_t(object):

    __slots__ = ["start", "stop", "start_position", "stop_position"]

    __typenames__ = ["int8_t", "int8_t", "double", "double"]

    __dimensions__ = [None, None, [3], [3]]

    def __init__(self):
        self.start = 0
        """ LCM Type: int8_t """
        self.stop = 0
        """ LCM Type: int8_t """
        self.start_position = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.stop_position = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """

    def encode(self):
        buf = BytesIO()
        buf.write(vision_start_stop_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bb", self.start, self.stop))
        buf.write(struct.pack('>3d', *self.start_position[:3]))
        buf.write(struct.pack('>3d', *self.stop_position[:3]))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != vision_start_stop_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return vision_start_stop_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = vision_start_stop_t()
        self.start, self.stop = struct.unpack(">bb", buf.read(2))
        self.start_position = struct.unpack('>3d', buf.read(24))
        self.stop_position = struct.unpack('>3d', buf.read(24))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if vision_start_stop_t in parents: return 0
        tmphash = (0x61385c7c33ce684f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if vision_start_stop_t._packed_fingerprint is None:
            vision_start_stop_t._packed_fingerprint = struct.pack(">Q", vision_start_stop_t._get_hash_recursive([]))
        return vision_start_stop_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", vision_start_stop_t._get_packed_fingerprint())[0]

